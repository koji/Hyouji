name: Publish to npm

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (optional, uses package.json if not specified)'
        required: false
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should-publish: ${{ steps.validation.outputs.should-publish }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-validate-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-validate-
            ${{ runner.os }}-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Quick validation
        id: validation
        run: |
          echo "Running quick validation checks..."

          # Basic package.json validation
          if ! node -e "require('./package.json')"; then
            echo "‚ùå Invalid package.json"
            exit 1
          fi

          # Check if this is a valid release
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PACKAGE_VERSION"

          if [ "${{ github.event_name }}" = "release" ]; then
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            RELEASE_VERSION=${RELEASE_TAG#v}
            if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
              echo "‚ùå Version mismatch: package.json($PACKAGE_VERSION) != release($RELEASE_VERSION)"
              exit 1
            fi
          fi

          echo "should-publish=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Quick validation passed"

      - name: Validation summary
        if: always()
        run: |
          echo "# üîç Pre-publish Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** $(node -p "require('./package.json').name")@$(node -p "require('./package.json').version")" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.validation.outputs.should-publish }}" = "true" ]; then
            echo "‚úÖ **Result:** Validation passed - proceeding to publish" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Result:** Validation failed - publish blocked" >> $GITHUB_STEP_SUMMARY
          fi

  publish:
    needs: validate
    if: needs.validate.outputs.should-publish == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'

      - name: Verify network connectivity and npm registry
        run: |
          echo "Checking network connectivity and npm registry access..."

          # Test npm registry connectivity with retry
          for i in {1..3}; do
            if curl -s --max-time 10 https://registry.npmjs.org/ > /dev/null; then
              echo "‚úÖ npm registry is accessible"
              break
            else
              echo "‚ö†Ô∏è  Attempt $i: npm registry not accessible, retrying..."
              if [ $i -eq 3 ]; then
                echo "‚ùå Error: Cannot reach npm registry after 3 attempts"
                echo "Publishing will fail without registry access"
                exit 1
              fi
              sleep 10
            fi
          done

          # Test npm CLI connectivity
          if npm ping > /dev/null 2>&1; then
            echo "‚úÖ npm CLI can reach registry"
          else
            echo "‚ö†Ô∏è  Warning: npm ping failed, but continuing..."
          fi

      - name: Cache dependencies and build artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
            dist
          key: ${{ runner.os }}-publish-${{ hashFiles('**/bun.lock', 'src/**/*', 'tsconfig.json', 'vite.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-publish-
            ${{ runner.os }}-deps-build-
            ${{ runner.os }}-deps-
            ${{ runner.os }}-

      - name: Install dependencies with retry
        run: |
          echo "Installing dependencies for publishing..."

          # Retry dependency installation up to 3 times
          for i in {1..3}; do
            if bun install --frozen-lockfile; then
              echo "‚úÖ Dependencies installed successfully"
              break
            else
              echo "‚ö†Ô∏è  Attempt $i: Dependency installation failed, retrying..."
              if [ $i -eq 3 ]; then
                echo "‚ùå Error: Failed to install dependencies after 3 attempts"
                echo "This could be due to:"
                echo "  - Network connectivity issues"
                echo "  - npm registry problems"
                echo "  - Invalid bun.lock"
                echo "  - Disk space issues"
                exit 1
              fi
              # Clean bun cache and retry
              rm -rf ~/.bun/install/cache
              sleep 10
            fi
          done

      # Pre-publish validation - Run all CI validation steps
      - name: Run ESLint
        run: |
          echo "Running ESLint checks for publishing..."
          if ! bun run test:lint; then
            echo "‚ùå Error: ESLint checks failed - cannot publish"
            echo "Fix all linting errors before publishing"
            exit 1
          fi
          echo "‚úÖ ESLint checks passed"

      - name: Check Prettier formatting
        run: |
          echo "Checking code formatting for publishing..."
          if ! bun run test:prettier; then
            echo "‚ùå Error: Code formatting issues - cannot publish"
            echo "Run 'bun run fix:prettier' to fix formatting before publishing"
            exit 1
          fi
          echo "‚úÖ Code formatting is correct"

      - name: TypeScript compilation check
        run: |
          echo "Checking TypeScript compilation for publishing..."
          if ! bunx tsc --noEmit; then
            echo "‚ùå Error: TypeScript compilation failed - cannot publish"
            echo "Fix all type errors before publishing"
            exit 1
          fi
          echo "‚úÖ TypeScript compilation successful"

      - name: Run unit tests
        run: |
          echo "Running unit tests for publishing..."
          if ! bun test; then
            echo "‚ùå Error: Unit tests failed - cannot publish"
            echo "All tests must pass before publishing"
            exit 1
          fi
          echo "‚úÖ All unit tests passed"

      - name: Run tests with coverage
        run: |
          echo "Running coverage tests for publishing..."
          if ! bun run test:coverage; then
            echo "‚ùå Error: Coverage tests failed - cannot publish"
            echo "Ensure coverage requirements are met before publishing"
            exit 1
          fi
          echo "‚úÖ Coverage tests completed successfully"

      - name: Build package
        run: |
          echo "Building package for publishing..."
          if ! bun run build; then
            echo "‚ùå Error: Package build failed - cannot publish"
            echo "Fix build errors before publishing"
            exit 1
          fi
          echo "‚úÖ Package built successfully"

      - name: Verify dist directory structure
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/index.cjs" ]; then
            echo "Error: dist/index.cjs not found"
            exit 1
          fi
          echo "‚úì Build artifacts verified"

      - name: Test CLI binary execution
        run: |
          chmod +x dist/index.cjs
          node dist/index.cjs --help || echo "CLI help command executed"
          echo "‚úì CLI binary execution verified"

      # Version consistency checks
      - name: Verify version consistency
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Package version: $PACKAGE_VERSION"

          if [ "${{ github.event_name }}" = "release" ]; then
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            RELEASE_VERSION=${RELEASE_TAG#v}
            echo "Release version: $RELEASE_VERSION"
            
            if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
              echo "Error: Package version ($PACKAGE_VERSION) does not match release tag ($RELEASE_VERSION)"
              exit 1
            fi
            echo "‚úì Version consistency verified"
          else
            echo "‚úì Manual dispatch - using package.json version: $PACKAGE_VERSION"
          fi

      - name: Verify package integrity
        run: |
          # Check that all required files are present
          if [ ! -f "package.json" ]; then
            echo "Error: package.json not found"
            exit 1
          fi

          if [ ! -f "README.md" ]; then
            echo "Error: README.md not found"
            exit 1
          fi

          if [ ! -f "LICENSE" ]; then
            echo "Error: LICENSE not found"
            exit 1
          fi

          # Verify package.json has required fields
          node -e "
            const pkg = require('./package.json');
            const required = ['name', 'version', 'description', 'main', 'bin'];
            for (const field of required) {
              if (!pkg[field]) {
                console.error(\`Error: Missing required field '\${field}' in package.json\`);
                process.exit(1);
              }
            }
            console.log('‚úì Package integrity verified');
          "

      # Secure npm authentication
      - name: Configure npm authentication
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "‚ùå Error: NPM_TOKEN secret is not configured"
            echo "Please add NPM_TOKEN as a repository secret with your npm authentication token"
            exit 1
          fi

          # Validate token format
          echo "Validating NPM_TOKEN format..."
          if [[ ! "$NPM_TOKEN" =~ ^npm_.* ]]; then
            echo "‚ö†Ô∏è  Warning: NPM_TOKEN doesn't start with 'npm_'"
            echo "Modern npm tokens should start with 'npm_' prefix"
            echo "If you're using an older token format, it may still work"
          else
            echo "‚úì NPM_TOKEN format looks correct"
          fi

          # Configure npm to use the token using npm config commands
          npm config set //registry.npmjs.org/:_authToken "${{ secrets.NPM_TOKEN }}"
          npm config set registry https://registry.npmjs.org/
          npm config set always-auth true
          
          # Verify the configuration was set
          echo "npm configuration after setup:"
          npm config list

          echo "‚úì npm authentication configured"
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify npm authentication
        run: |
          # Debug: Check if .npmrc was created correctly
          echo "Checking .npmrc configuration:"
          
          # Check the GitHub Actions npm config file
          if [ -f "/home/runner/work/_temp/.npmrc" ]; then
            echo "‚úì GitHub Actions .npmrc file exists at /home/runner/work/_temp/.npmrc"
            sed 's/:_authToken=.*/:_authToken=***MASKED***/' "/home/runner/work/_temp/.npmrc"
          fi
          
          # Check home directory .npmrc
          if [ -f ~/.npmrc ]; then
            echo "‚úì Home .npmrc file exists at ~/.npmrc"
            sed 's/:_authToken=.*/:_authToken=***MASKED***/' ~/.npmrc
          fi
          
          echo ""
          
          # Debug: Check npm configuration
          echo "npm configuration:"
          npm config list
          echo ""
          
          # Test authentication by checking whoami (this will fail gracefully if auth is invalid)
          echo "Testing npm authentication..."
          if npm whoami > /dev/null 2>&1; then
            NPM_USER=$(npm whoami)
            echo "‚úì Successfully authenticated as npm user: $NPM_USER"
          else
            echo "‚ùå npm authentication failed"
            echo ""
            echo "Debugging information:"
            echo "- NPM_TOKEN secret is set: ${{ secrets.NPM_TOKEN != '' }}"
            echo "- Token length: ${#NPM_TOKEN}"
            echo "- Token starts with: ${NPM_TOKEN:0:8}..."
            echo ""
            echo "Common issues:"
            echo "1. Token may be expired or invalid"
            echo "2. Token may not have publishing permissions"
            echo "3. Token format may be incorrect (should start with 'npm_')"
            echo "4. Account may require 2FA for publishing"
            echo ""
            echo "Please verify:"
            echo "- NPM_TOKEN is a valid automation token from https://www.npmjs.com/settings/tokens"
            echo "- Token has 'Automation' type with read/write permissions"
            echo "- Your npm account has publishing permissions for this package"
            exit 1
          fi
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # npm publishing with comprehensive error handling and retry
      - name: Publish to npm
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "üöÄ Publishing $PACKAGE_NAME@$PACKAGE_VERSION to npm..."

          # Check if version already exists
          echo "Checking if version already exists on npm..."
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version > /dev/null 2>&1; then
            echo "‚ùå Error: Version $PACKAGE_VERSION already exists on npm"
            echo "Please update the version in package.json before publishing"
            echo "Current published versions:"
            npm view "$PACKAGE_NAME" versions --json | tail -10
            exit 1
          fi
          echo "‚úÖ Version $PACKAGE_VERSION is available for publishing"

          # Publish with retry logic
          for i in {1..3}; do
            echo "Publishing attempt $i..."
            
            if npm publish --access public; then
              echo "‚úÖ Successfully published $PACKAGE_NAME@$PACKAGE_VERSION"
              break
            else
              PUBLISH_EXIT_CODE=$?
              echo "‚ö†Ô∏è  Publish attempt $i failed with exit code $PUBLISH_EXIT_CODE"
              
              if [ $i -eq 3 ]; then
                echo "‚ùå Error: Failed to publish package after 3 attempts"
                echo ""
                echo "Common publishing issues:"
                echo "  - Authentication problems (check NPM_TOKEN)"
                echo "  - Network connectivity issues"
                echo "  - Package validation failures"
                echo "  - Registry temporary unavailability"
                echo ""
                echo "Troubleshooting steps:"
                echo "  1. Verify NPM_TOKEN has publishing permissions"
                echo "  2. Check package.json for required fields"
                echo "  3. Ensure package name is available"
                echo "  4. Try publishing manually: npm publish --access public"
                exit 1
              fi
              
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Post-publish verification with retry
      - name: Verify npm publication
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "üîç Verifying publication of $PACKAGE_NAME@$PACKAGE_VERSION..."

          # Wait for npm registry to update with retry logic
          for i in {1..6}; do
            echo "Verification attempt $i..."
            sleep 10
            
            if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version > /dev/null 2>&1; then
              PUBLISHED_VERSION=$(npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version)
              echo "‚úÖ Package successfully published and available: $PACKAGE_NAME@$PUBLISHED_VERSION"
              
              # Get additional package info
              echo "üì¶ Package information:"
              npm view "$PACKAGE_NAME@$PACKAGE_VERSION" --json | jq -r '.name, .version, .description' 2>/dev/null || echo "Package details available on npm"
              break
            else
              if [ $i -eq 6 ]; then
                echo "‚ö†Ô∏è  Warning: Package verification failed after 60 seconds"
                echo "The package was published but may not be immediately available"
                echo "This can happen due to npm registry propagation delays"
                echo "Check manually: https://www.npmjs.com/package/$PACKAGE_NAME"
              else
                echo "Package not yet available, waiting..."
              fi
            fi
          done

      - name: Test package installation
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "üß™ Testing package installation from npm..."

          # Create a temporary directory for testing
          mkdir -p /tmp/npm-test
          cd /tmp/npm-test

          # Initialize a test package.json to avoid warnings
          echo '{"name": "test-install", "version": "1.0.0"}' > package.json

          # Try to install the published package with retry
          for i in {1..4}; do
            echo "Installation test attempt $i..."
            sleep 15  # Wait for registry propagation
            
            if npm install "$PACKAGE_NAME@$PACKAGE_VERSION" --no-save; then
              echo "‚úÖ Package installation successful"
              
              # Verify package contents
              if [ -d "node_modules/$PACKAGE_NAME" ]; then
                echo "‚úÖ Package directory created"
                
                # Check if package.json exists in installed package
                if [ -f "node_modules/$PACKAGE_NAME/package.json" ]; then
                  INSTALLED_VERSION=$(node -p "require('./node_modules/$PACKAGE_NAME/package.json').version")
                  echo "‚úÖ Installed version: $INSTALLED_VERSION"
                fi
                
                # Test CLI functionality if it's a CLI package
                if [ -f "node_modules/.bin/github-label-manager" ]; then
                  echo "Testing CLI functionality..."
                  if node_modules/.bin/github-label-manager --help > /dev/null 2>&1; then
                    echo "‚úÖ CLI functionality verified"
                  else
                    echo "‚ö†Ô∏è  CLI help command failed, but binary exists"
                  fi
                fi
              fi
              break
            else
              if [ $i -eq 4 ]; then
                echo "‚ö†Ô∏è  Warning: Package installation test failed after 4 attempts"
                echo "This may be due to npm registry propagation delay"
                echo "The package was published successfully but may need more time to be available"
                echo "Manual verification: npm install $PACKAGE_NAME@$PACKAGE_VERSION"
              else
                echo "Installation failed, retrying..."
              fi
            fi
          done

      - name: Generate publish summary
        if: always()
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "# üì¶ Publish Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** $PACKAGE_NAME@$PACKAGE_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event_name }}" = "release" ]; then
            echo "**Release:** ${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "**Release URL:** ${{ github.event.release.html_url }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Validation Steps" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Code quality checks" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ TypeScript compilation" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Unit tests and coverage" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Package build" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Version consistency" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Package integrity" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üöÄ Publishing Results" >> $GITHUB_STEP_SUMMARY

          # Check if package was published successfully
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version > /dev/null 2>&1; then
            echo "- ‚úÖ Published to npm registry" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Package verification successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**üì• Installation:** \`npm install $PACKAGE_NAME\`" >> $GITHUB_STEP_SUMMARY
            echo "**üîó npm Registry:** https://www.npmjs.com/package/$PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ö†Ô∏è Package verification pending (registry propagation)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow completed at:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìä Status Badges" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Add these badges to your README.md:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```markdown' >> $GITHUB_STEP_SUMMARY
          echo "[![Publish](https://github.com/${{ github.repository }}/actions/workflows/publish.yml/badge.svg)](https://github.com/${{ github.repository }}/actions/workflows/publish.yml)" >> $GITHUB_STEP_SUMMARY
          echo "[![npm version](https://badge.fury.io/js/$PACKAGE_NAME.svg)](https://badge.fury.io/js/$PACKAGE_NAME)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Publishing success confirmation
        if: success()
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")

          echo "üéâ Publishing workflow completed successfully!"
          echo ""
          echo "üì¶ Package Details:"
          echo "  Name: $PACKAGE_NAME"
          echo "  Version: $PACKAGE_VERSION"
          echo "  Registry: https://www.npmjs.com/package/$PACKAGE_NAME"
          echo ""
          echo "üì• Installation:"
          echo "  npm install $PACKAGE_NAME"
          echo "  yarn add $PACKAGE_NAME"
          echo ""
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "üè∑Ô∏è Release: ${{ github.event.release.html_url }}"
            echo ""
          fi
          echo "‚úÖ The package is now available for users to install!"

      - name: Publishing failure notification
        if: failure()
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name" 2>/dev/null || echo "unknown")
          PACKAGE_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "unknown")

          echo "‚ùå Publishing workflow failed!"
          echo ""
          echo "üì¶ Package: $PACKAGE_NAME@$PACKAGE_VERSION"
          echo ""
          echo "üîç Common publishing issues:"
          echo "  - Authentication: Check NPM_TOKEN secret"
          echo "  - Version conflict: Version may already exist on npm"
          echo "  - Network issues: Temporary npm registry problems"
          echo "  - Validation failures: Code quality or test issues"
          echo ""
          echo "üõ†Ô∏è Troubleshooting steps:"
          echo "  1. Check the workflow logs for specific error messages"
          echo "  2. Verify NPM_TOKEN has publishing permissions"
          echo "  3. Ensure package.json version is unique"
          echo "  4. Run validation steps locally: bun run test:lint && bun test && bun run build"
          echo ""
          echo "üìû Need help? Check the repository issues or documentation."
